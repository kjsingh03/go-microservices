version: "1.0"

services:
  broker-service:
    build: ./broker
    ports:
      - "${BROKER_PORT}:80"
    environment:
      - BROKER_PORT=80
      - AUTH_SERVICE_URL=http://authentication-service:80
      - LOG_SERVICE_URL=http://logger-service:80/api/v1
      - MAIL_SERVICE_URL=http://mailer-service:80/api/v1
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - go_microservices

  rabbitmq:
    image: rabbitmq:4.1.1-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - go_microservices

  authentication-service:
    build: ./auth
    ports:
      - "${AUTH_PORT}:80"          
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - AUTH_PORT=80
    networks:
      - go_microservices

  logger-service:
    build: ./logger
    ports:
      - "${LOGGER_PORT}:80"
    environment:
      - LOGGER_PORT=80
      - MONGO_URL=${MONGO_URL}
    networks:
      - go_microservices

  mailer-service:
    build: ./mailer
    ports:
      - "${MAILER_PORT}:80"
    environment:
      - MAILER_PORT=80
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - FROM_ADDRESS=${FROM_ADDRESS}
      - FROM_NAME=${FROM_NAME}
    networks:
      - go_microservices

  listener:
    build: ./listener
    ports:
      - "${LISTENER_PORT}:80"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - go_microservices

networks:
  go_microservices:
    driver: bridge